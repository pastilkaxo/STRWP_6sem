Учвствуют 2 пользователя 
1 - Центр сертификации CA
2 - Ресурс , который запрашивает сертификат для защищенного соединения HTTPS
2.1 - Клиент, который проверяет сертификат ресурса доверяя сертификату выданным CA


127.0.0.1 LAB22-ABC


RES:

1. Создает  закрытый ключ
который используйтся для создания цифровой подписки, подтверждающий 
что данные были отправлены именно этим ресурсом

! - openssl genrsa -out resource.key 2048

    ! никогда не передается 3м лицам
    ! используется для 
        Шифрования/расшифровки данных в HTTPS.
        Подтверждения владения сертификатом (TLS-рукопожатие).

2. После , создается CSR запрос на подпись сертификата
на основе закрытого ключа

в запросе указывается
    req -new → Создать новый CSR.

    -key resource.key → Использовать закрытый ключ из resource.key.

    -out request.csr → Сохранить CSR в файл request.csr.

    -subj "/CN=RS-LAB22-ZKA" → Указать Common Name (CN) сертификата (обычно домен или имя сервера).

! - openssl req -new -key resource.key -out request.csr -subj "/CN=RS-LAB22-LVO"

Он содержит:

    Открытый ключ (из пары с resource.key).

    Информацию о владельце (в данном случае только CN=RS-LAB22-ZKA).

    Не содержит закрытый ключ!

Затем ресурс отправляет этот запрос CA


CA:

1 - CA генерирует свой RSA закрытый ключ ca.key

openssl genrsa -out ca.key 2048

! - Это приватный ключ CA, 
который никогда не должен передаваться 
(используется только для подписи сертификатов).


2 -  После этого создается самоподписанный сертификат CA корневой сертификат

openssl req -x509 -new -nodes -key ca.key -sha256 -days 365 -out ca.crt -subj "/CN=CA-LAB22-EVV"

корневой сертификат, который добавляется в доверенные хранилища.

Параметр	Описание
-x509	Создаёт самоподписанный сертификат (не CSR).
-new	Генерирует новый запрос.
-nodes	Не шифрует закрытый ключ (иначе потребуется пароль).
-key ca.key	Использует закрытый ключ CA.
-sha256	Алгоритм хеширования (SHA-256).
-days 365	Срок действия сертификата (1 год).
-out ca.crt	Сохраняет сертификат в ca.crt.
-subj "/CN=CA-LAB22-EVV"	Указывает Common Name (CN) сертификата.

4 (Дополнительно) - Создается файл который расширяет CA позваляя работать с дополнительными доменами

subjectAltName=DNS:LAB22-EVV,DNS:EVV

5 -  Подписывается сертификат для resource


openssl x509 -req -in request.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out resource.crt -days 365 -sha256 -extfile san.ext


Здесь подписывается .csr от ресурса создавая валидный сертификат
и в качестве расширения SAN берется из файла

Параметр	Описание
-req	Указывает, что на входе CSR (не самоподписанный сертификат).
-in request.csr	Файл CSR от Resource.
-CA ca.crt	Корневой сертификат CA.
-CAkey ca.key	Закрытый ключ CA.
-CAcreateserial	Создаёт серийный номер (уникальный ID сертификата).
-out resource.crt	Сохраняет подписанный сертификат в resource.crt.
-days 365	Срок действия сертификата (1 год).
-sha256	Алгоритм подписи (SHA-256).
-extfile san.ext	Файл с SAN (Subject Alternative Names).


Что получает Resource?
    resource.crt (подписанный сертификат).
    ca.crt (корневой сертификат, чтобы клиенты доверяли resource.crt).


Resource:                   CA:
1. Генерирует `resource.key`  │
2. Создаёт `request.csr` ────┐
                             │
                             ├─ 3. Подписывает CSR → `resource.crt`
                             │
4. Получает `resource.crt` ←─┘
5. Настраивает HTTPS (`resource.key` + `resource.crt`)